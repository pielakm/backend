generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url = env("DATABASE_URL")
}

model Cities {
    idcity                  Int                 @id @default(autoincrement())
    city                    String              @db.VarChar(100)
    idcountry               Int  
    country                 Countries           @relation(fields: [idcountry], references: [idcountry])
    event_locations         Event_locations[]    
    users                   Users[]
}

model Countries {
    idcountry               Int                 @id @default(autoincrement()) 
    name_country            String              @db.VarChar(100)
    cities                  Cities[]
}

model Comments {
    idcomment               Int                 @id @default(autoincrement()) 
    idevent                 Int
    iduser                  Int
    comment                 String              @db.VarChar(512)
    date_comment            DateTime            @db.DateTime(0) 
    event                   Events              @relation(fields: [idevent], references: [idevent])
    user                    Users               @relation(fields: [iduser], references: [iduser])
}

model Events {
    idevent                 Int                 @id @default(autoincrement())
    name                    String              @db.VarChar(100)
    start_date              DateTime            @db.DateTime(0)
    end_date                DateTime?           @db.DateTime(0)
    description             String?             @db.VarChar(1024)
    number_of_ticket        Int
    photo                   String?             @db.VarChar(1024)
    contact_info            String              @db.VarChar(256)
    idevent_category        Int
    idevent_location        Int
    status                  Int                 @db.TinyInt
    is_seat_categorized     Boolean             // Nowe pole typu Boolean
    event_category          Event_categories    @relation(fields: [idevent_category], references: [idevent_category])
    event_location          Event_locations     @relation(fields: [idevent_location], references: [idevent_location])
    event_tickets           Event_tickets[]
    comments                Comments[]
    favourite_events        Favourite_events[]
}

model Event_categories {
    idevent_category        Int                 @id @default(autoincrement())
    category_type           String              @db.VarChar(100)
    events                  Events[]
}

model Event_locations {
    idevent_location        Int                 @id @default(autoincrement())
    name                    String              @db.VarChar(100)
    idcity                  Int                 
    city                    Cities              @relation(fields:[idcity], references: [idcity])
    events                  Events[]

}

model Event_tickets {
    idevent_ticket          Int                 @id @default(autoincrement())
    name                    String?             @db.VarChar(100)
    price                   Float               @db.Float
    start_date              DateTime            @db.DateTime(0)
    end_date                DateTime            @db.DateTime(0)
    idevent                 Int
    event                   Events              @relation(fields: [idevent], references: [idevent])
    order_tickets           Order_tickets[]
}

model Favourite_events {
    idfavourite_event       Int                 @id @default(autoincrement())
    idevent                 Int
    iduser                  Int
    event                   Events              @relation(fields: [idevent], references: [idevent])
    user                    Users               @relation(fields: [iduser], references: [iduser])
}

model Orders {
    idorder                 Int                 @id @default(autoincrement())
    data                    DateTime            @db.Date
    total_amount            Float               @db.Float
    total_tax_amount        Float               @db.Float
    iduser                  Int
    user                    Users               @relation(fields: [iduser], references: [iduser])
    order_tickets           Order_tickets[]
    payments                Payments[]
}

model Order_tickets {
    idorder_ticket          Int                 @id @default(autoincrement())
    idevent_ticket          Int
    idorder                 Int
    ticket_status           String
    event_ticket            Event_tickets       @relation(fields: [idevent_ticket], references: [idevent_ticket])
    order                   Orders              @relation(fields: [idorder], references: [idorder])
}

model payment_methods {
    idpayment_method        Int                 @id @default(autoincrement())
    name                    String              @db.VarChar(45)
    payments                Payments[]
}

model Payments {
    idpayment               Int                 @id @default(autoincrement())
    idorder                 Int
    idpayment_method        Int
    payment_status          String
    //payment_amount        Double
    order                   Orders              @relation(fields: [idorder], references: [idorder])
    payment_method          payment_methods     @relation(fields: [idpayment_method], references: [idpayment_method])
}

model Users {
    iduser                  Int                 @id @default(autoincrement())
    name                    String              @db.VarChar(45)
    second_name             String?             @db.VarChar(45)
    surname                 String              @db.VarChar(45)
    iduser_type             Int
    email                   String              @db.VarChar(45) @unique
    phonenumber             Int
    zipcode                 String              @db.VarChar(45)
    street                  String              @db.VarChar(100)
    idcity                  Int
    password                String              @db.VarChar(256)
    user_type               User_types          @relation(fields: [iduser_type], references: [iduser_type])
    city                    Cities              @relation(fields: [idcity], references: [idcity])
    comments                Comments[]
    favourite_events        Favourite_events[]
    orders                  Orders[]
}

model User_types{
    iduser_type             Int                 @id
    name_type               String              @db.VarChar(45)
    users                   Users[]
}
